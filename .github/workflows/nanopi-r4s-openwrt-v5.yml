name: NanoPi R4S OpenWrt V5
# 这个workflow的工作原理
# 1 尝试从本仓库 release 中下载 build_dir 和 staging_dir
# 如果下载成功，直接进入 build openwrt
# 如果下载失败，进入 build tools and toolchain
# build tools and toolchain 成功，进入 build openwrt
# 
# 在第一次构建的时候，会需要 build tools and toolchain
# 后续构建会直接从 release 下载 tools and toolchain
# 从而节省时间，大概能缩短 1hr

on: 
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

jobs:
  Download_SDK:
    runs-on: ubuntu-18.04
    steps:
    - name: Download from Release
      uses: Legion2/download-release-action@v2.1.0
      with:
        repository: ${{ github.repository }}
        tag: 'latest-toolchain'
        path: .
        file: immortalwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
    - name: Log
      run: |
        [ -f immortalwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz ] && echo "$FILE exist." || exit 2
    - name: Upload To Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: immortalwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        path: immortalwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz


  Build_SDK:
    needs: [Download_SDK]
    if: ${{ failure() }}
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Init Building Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E apt-get clean -y
        sudo -E swapoff -a
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc /swapfile
    - name: Clone Source
      run: |
        cd "/home/runner"
        git clone --branch "master" --single-branch "https://github.com/project-openwrt/openwrt" "openwrt"
        sudo chown -R runner:runner "openwrt"
        cd "/home/runner/openwrt"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
    - name: Apply config
      run: |
        cd "/home/runner/openwrt"
        patch -p1 < "${GITHUB_WORKSPACE}/patches/snapshot-modify_for_r4s.patch"
        cp -f "${GITHUB_WORKSPACE}/configs/sdk-config.seed" ".config"
        make defconfig
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: ${{ failure() }}
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    - name: Build Tools and Toolchain
      run: |
        cd "/home/runner/openwrt"
        make -j$[$(nproc)+1]
    - name: Rebuild to Collect Error Log
      if: failure()
      run: |
        cd "/home/runner/openwrt"
        make -j1 V=s
    - name: Upload Toolchain SDK
      uses: actions/upload-artifact@v2
      with:
        name: immortalwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        path: /home/runner/openwrt/bin/targets/rockchip/armv8/immortalwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        
    - name: Delete Release
      uses: dev-drprasad/delete-tag-and-release@v0.1.3
      with:
        delete_release: true # default: false
        tag_name: latest-toolchain # tag name to delete
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: latest-toolchain
        release_name: latest-toolchain
        body: |
          ${{ github.ref }}, Todo add workflow run id
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset-sdk
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/openwrt/bin/targets/rockchip/armv8/immortalwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        asset_name: immortalwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        asset_content_type: application/x-xz
  
  Download_Success:
    runs-on: ubuntu-18.04
    needs: [Download_SDK]
    if: ${{ success() }}
    steps:
    - name: Download Success
      run: |
        echo "Donwload Success";

  Build_Openwrt:
    runs-on: ubuntu-18.04
    needs: [Download_Success, Build_SDK]
    if: ${{ always() }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Init Building Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E apt-get clean -y
        sudo -E swapoff -a
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc /swapfile
    - name: Download SDK
      uses: actions/download-artifact@v2
      with:
        name: immortalwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
    - name: Clone Source
      run: |
        cd "/home/runner"
        git clone --branch "master" --single-branch "https://github.com/project-openwrt/openwrt" "openwrt"
        sudo chown -R runner:runner "openwrt"
    - name: Prepare buid_dir
      run: |
        # tar -xf latest-toolchain.tgz
        # mv latest-toolchain/build_dir /home/runner/openwrt
        # mv latest-toolchain/staging_dir /home/runner/openwrt
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    
    - name: Install Packages
      run: |
        cd "/home/runner/openwrt"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
    - name: Apply config
      run: |
        cd "/home/runner/openwrt"
        patch -p1 < "${GITHUB_WORKSPACE}/patches/snapshot-modify_for_r4s.patch"
        cp -f "${GITHUB_WORKSPACE}/configs/snapshot-config.seed" ".config"
        make defconfig
    - name: Make Download
      run: |
        cd "/home/runner/openwrt"
        make download -j99
    - name: Make Tool
      run: |
        cd "/home/runner/openwrt"
        make tools/compile -j$[$(nproc)+1]
    - name: Make Toolchain
      run: |
        cd "/home/runner/openwrt"
        make toolchain/compile -j$[$(nproc)+1]
    - name: Build OpenWrt-Snapshot
      run: |
        cd "/home/runner/openwrt"
        make -j$[$(nproc)+1]
        tar -czvf bin.tgz bin
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz" "../openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz" "../openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/sha256sums" "../openwrt-snapshot-sha256sums"
    - name: Rebuild OpenWrt-Snapshot to Collect Error Log
      if: failure()
      run: |
        cd "/home/runner/openwrt"
        make -j1 V=s
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz" "../openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz" "../openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/sha256sums" "../openwrt-snapshot-sha256sums"
    - name: Upload OpenWrt-Snapshot SHA256SUM Hash
      uses: actions/upload-artifact@v2
      with:
        name: openwrt-snapshot-sha256sums
        path: /home/runner/openwrt-snapshot-sha256sums
    - name: Upload OpenWrt-Snapshot EXT4 Firmware
      uses: actions/upload-artifact@v2
      with:
        name: openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz
        path: /home/runner/openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz
    - name: Upload OpenWrt-Snapshot SquashFS Firmware
      uses: actions/upload-artifact@v2
      with:
        name: openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz
        path: /home/runner/openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz
    - name: Upload OpenWrt-Packages
      uses: actions/upload-artifact@v2
      with:
        name: bin
        path: /home/runner/bin.tgz
    - name: Upload OpenWrt-Snapshot Firmwares to Cloud
      timeout-minutes: 30
      run: |
        cd "/home/runner"
        ${GITHUB_WORKSPACE}/scripts/upload_firmware.sh "FriendlyARM NanoPi R4S" "rockchip-armv8-friendlyarm_nanopi-r4s" "snapshot" "5.4" "${{ secrets.TELEGRAM_BOT_TOKEN }}" || exit 0
  
  Cleanup-Old-Artifacts:
    needs: [Build_Openwrt]
    runs-on: ubuntu-18.04
    steps:
    - name: Cleanup Old Action Artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ github.token }}
        expire-in: 7d
  Cleanup-Workflow-Runs:
    needs: Cleanup-Old-Artifacts
    runs-on: ubuntu-18.04
    steps:
    - name: Cleanup Workflow Runs
      uses: GitRML/delete-workflow-runs@v1.2.1
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 7
