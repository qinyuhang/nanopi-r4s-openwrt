name: NanoPi R4S OpenWrt V6
# 这个workflow的工作原理
# 在编译完成之后，把整个 openwrt xz 一下，传到 release
# 以后再触发的时候，从 release 下载包，再执行 pull/install/download/make

on: 
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

jobs:
  Download_REPO:
    runs-on: ubuntu-18.04
    steps:
    - name: Download from Release
      uses: Legion2/download-release-action@v2.1.0
      with:
        repository: ${{ github.repository }}
        tag: 'latest-repo'
        path: .
        file: openwrt.tar.xz
    - name: Download from Release - bin.tar.xz
      uses: Legion2/download-release-action@v2.1.0
      with:
        repository: ${{ github.repository }}
        tag: 'latest-repo'
        path: .
        file: bin.tar.xz
    - name: Download from Release - build_dir.tar.xz
      uses: Legion2/download-release-action@v2.1.0
      with:
        repository: ${{ github.repository }}
        tag: 'latest-repo'
        path: .
        file: build_dir.tar.xz
    - name: Download from Release - staging_dir.tar.xz
      uses: Legion2/download-release-action@v2.1.0
      with:
        repository: ${{ github.repository }}
        tag: 'latest-repo'
        path: .
        file: staging_dir.tar.xz
    - name: Log
      run: |
        [ -f openwrt.tar.xz ] && echo "$FILE exist." || exit 2
    - name: Upload To Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: openwrt.tar.xz
        path: openwrt.tar.xz
    - name: Upload To Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: bin.tar.xz
        path: bin.tar.xz
    - name: Upload To Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build_dir.tar.xz
        path: build_dir.tar.xz
    - name: Upload To Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: staging_dir.tar.xz
        path: staging_dir.tar.xz

  # 第一次编译 第一部分，只编译到 tools toolchain
  # 为了防止 Release 过大 bin build_dir staging_dir 会分开打包
  First_Run_Part_1:
    runs-on: ubuntu-18.04
    needs: [Download_REPO]
    if: ${{ failure() }}
    steps: 
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Init Building Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E apt-get clean -y
        sudo -E swapoff -a
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc /swapfile
    - name: Clone Source
      run: |
        cd "/home/runner"
        git clone --branch "master" --single-branch "https://github.com/project-openwrt/openwrt" "openwrt"
        sudo chown -R runner:runner "openwrt"    
    - name: Install Packages
      run: |
        cd "/home/runner/openwrt"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
    - name: Apply config
      run: |
        cd "/home/runner/openwrt"
        patch -p1 < "${GITHUB_WORKSPACE}/patches/snapshot-modify_for_r4s.patch"
        cp -f "${GITHUB_WORKSPACE}/configs/snapshot-config.seed" ".config"
        make defconfig
    - name: Make Download
      run: |
        cd "/home/runner/openwrt"
        make download -j99
    - name: Make Tool
      run: |
        cd "/home/runner/openwrt"
        make tools/compile -j$[$(nproc)+1]
    - name: Make Toolchain
      run: |
        cd "/home/runner/openwrt"
        make toolchain/compile -j$[$(nproc)+1]
    - name: Xz openwrt
      run: |
        cd /home/runner/openwrt
        tar -cf bin.tar bin
        tar -cf build_dir.tar build_dir
        tar -cf staging_dir.tar staging_dir
        xz -T$[$(nproc)+1] bin.tar
        xz -T$[$(nproc)+1] build_dir.tar
        xz -T$[$(nproc)+1] staging_dir.tar
        rm -rf bin build_dir staging_dir
        mv bin.tar.xz /home/runner
        mv build_dir.tar.xz /home/runner
        mv staging_dir.tar.xz /home/runner
        cd /home/runner
        tar -cf openwrt.tar openwrt
        xz -T$[$(nproc)+1] openwrt.tar
    - name: Delete Release
      uses: dev-drprasad/delete-tag-and-release@v0.1.3
      with:
        delete_release: true # default: false
        tag_name: latest-repo # tag name to delete
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: latest-repo
        release_name: latest-repo
        body: |
          ${{ github.ref }}, Todo add workflow run id
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset-sdk
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/openwrt.tar.xz
        asset_name: openwrt.tar.xz
        asset_content_type: application/x-xz

    - name: Upload Release Asset - bin.tar.xz
      id: upload-release-asset-bin
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/bin.tar.xz
        asset_name: bin.tar.xz
        asset_content_type: application/x-xz

    - name: Upload Release Asset - build_dir.tar.xz
      id: upload-release-asset-build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/build_dir.tar.xz
        asset_name: build_dir.tar.xz
        asset_content_type: application/x-xz

    - name: Upload Release Asset - staging_dir.tar.xz
      id: upload-release-asset-staging
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/staging_dir.tar.xz
        asset_name: staging_dir.tar.xz
        asset_content_type: application/x-xz

    - name: Upload To Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: openwrt.tar.xz
        path: /home/runner/openwrt.tar.xz

    - name: Upload To Artifacts - bin.tar.xz
      uses: actions/upload-artifact@v2
      with:
        name: bin.tar.xz
        path: /home/runner/bin.tar.xz

    - name: Upload To Artifacts - build_dir.tar.xz
      uses: actions/upload-artifact@v2
      with:
        name: build_dir.tar.xz
        path: /home/runner/build_dir.tar.xz
        
    - name: Upload To Artifacts - staging_dir.tar.xz
      uses: actions/upload-artifact@v2
      with:
        name: staging_dir.tar.xz
        path: /home/runner/staging_dir.tar.xz

  # 第一次编译 第二部分，继续编译packages
  # 这里就是触发一下 Iteration_Run 即可
  First_Run_Part_2:
    runs-on: ubuntu-18.04
    needs: [First_Run_Part_1]
    if: ${{ always() }}
    steps:
    - name: Trigger Iteration_Run
      run: |
        echo "Trigger Iteration_Run"

  Flick_Download_Result:
    runs-on: ubuntu-18.04
    needs: [Download_REPO]
    if: ${{ failure() }}
    steps:
    - name: Flick_Download_Result
      run: | 
        echo "Flick Download Result"

  Pass_Through_Download_Result:
    runs-on: ubuntu-18.04
    needs: [Download_REPO]
    if: ${{ success() }}
    steps:
    - name: Pass_Through_Download_Result
      run: |
        echo "Pass_Through_Download_Result"

  # 后续编译
  # 从 artifactory 下载 openwrt.tar.xz 然后 git pull，install，make
  Iteration_Run:
    runs-on: ubuntu-18.04
    needs: [Pass_Through_Download_Result, First_Run_Part_2]
    if: ${{ always() }}
    steps:
    - name: Checker
      run: |
        should_run=${{ needs.Pass_Through_Download_Result.result == 'success' || needs.First_Run_Part_2.result == 'success' }}
        if ["$should_run" eq "true"]; then
          echo
        else
          exit 1
        fi
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Init Building Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E apt-get clean -y
        sudo -E swapoff -a
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc /swapfile

    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: openwrt.tar.xz
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: bin.tar.xz
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: build_dir.tar.xz
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: staging_dir.tar.xz

    - name: Prepare Artifacts
      run: |
        mv openwrt.tar.xz /home/runner
        cd /home/runner
        xz -d -T$[$(nproc)+1] openwrt.tar.xz
        tar -xf openwrt.tar
        mv staging_dir.tar.xz /home/runner/openwrt
        mv bin.tar.xz /home/runner/openwrt
        mv build_dir.tar.xz /home/runner/openwrt
        cd /home/runner/openwrt
        xz -d -T$[$(nproc)+1] staging_dir.tar.xz
        xz -d -T$[$(nproc)+1] bin.tar.xz 
        xz -d -T$[$(nproc)+1] build_dir.tar.xz
        tar -xf staging_dir.tar
        tar -xf bin.tar
        tar -xf build_dir.tar
        

    - name: Git pull
      run: |
        cd /home/runner/openwrt
        git pull
    # git pull 可能会出错，加一个ssh
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: ${{ failure() }}
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    
    - name: Install Packages
      run: |
        cd "/home/runner/openwrt"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
    - name: Make Download
      run: |
        cd "/home/runner/openwrt"
        make download -j99
    - name: Make Tool
      run: |
        cd "/home/runner/openwrt"
        make tools/compile -j$[$(nproc)+1]
    - name: Make Toolchain
      run: |
        cd "/home/runner/openwrt"
        make toolchain/compile -j$[$(nproc)+1]
    - name: Build OpenWrt-Snapshot
      run: |
        cd "/home/runner/openwrt"
        make -j$[$(nproc)+1]
        tar -czvf bin.tgz bin
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz" "../openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz" "../openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/sha256sums" "../openwrt-snapshot-sha256sums"
    - name: Rebuild OpenWrt-Snapshot to Collect Error Log
      if: failure()
      run: |
        cd "/home/runner/openwrt"
        make -j1 V=s
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz" "../openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz" "../openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/sha256sums" "../openwrt-snapshot-sha256sums"
    - name: Upload OpenWrt-Snapshot SHA256SUM Hash
      uses: actions/upload-artifact@v2
      with:
        name: openwrt-snapshot-sha256sums
        path: /home/runner/openwrt-snapshot-sha256sums
    - name: Upload OpenWrt-Snapshot EXT4 Firmware
      uses: actions/upload-artifact@v2
      with:
        name: openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz
        path: /home/runner/openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz
    - name: Upload OpenWrt-Snapshot SquashFS Firmware
      uses: actions/upload-artifact@v2
      with:
        name: openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz
        path: /home/runner/openwrt-snapshot-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz
    - name: Upload OpenWrt-Packages
      uses: actions/upload-artifact@v2
      with:
        name: bin
        path: /home/runner/bin.tgz

    - name: Tar openwrt
      run: |
        cd /home/runner
        rm openwrt.tar
        tar -cf openwrt.tar openwrt
        xz -T$[$(nproc)+1] openwrt.tar

    # Do Release
    - name: Delete Release
      uses: dev-drprasad/delete-tag-and-release@v0.1.3
      with:
        delete_release: true # default: false
        tag_name: latest-repo # tag name to delete
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: latest-repo
        release_name: latest-repo
        body: |
          ${{ github.ref }}, Todo add workflow run id
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset-sdk
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/openwrt.tar.xz
        asset_name: openwrt.tar.xz
        asset_content_type: application/x-xz
 
    - name: Upload OpenWrt-Snapshot Firmwares to Cloud
      timeout-minutes: 30
      run: |
        cd "/home/runner"
        ${GITHUB_WORKSPACE}/scripts/upload_firmware.sh "FriendlyARM NanoPi R4S" "rockchip-armv8-friendlyarm_nanopi-r4s" "snapshot" "5.4" "${{ secrets.TELEGRAM_BOT_TOKEN }}" || exit 0
  
  Cleanup-Old-Artifacts:
    needs: [Iteration_Run]
    runs-on: ubuntu-18.04
    steps:
    - name: Cleanup Old Action Artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ github.token }}
        expire-in: 7d
  Cleanup-Workflow-Runs:
    needs: Cleanup-Old-Artifacts
    runs-on: ubuntu-18.04
    steps:
    - name: Cleanup Workflow Runs
      uses: GitRML/delete-workflow-runs@v1.2.1
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 7
