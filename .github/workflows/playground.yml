name: Playgroud

on: 
  repository_dispatch:
  workflow_dispatch:

jobs:
  Job_A:
    runs-on: ubuntu-18.04
    steps:
      - name: Build Toolchain
        run: |
          cd "/home/runner";
          mkdir -p sdk
          touch sdk/staging_dir
          touch sdk/build_dir
          tar -czvf sdk.tgz sdk
      - name: Upload SDK
        uses: actions/upload-artifact@v2
        with:
          name: sdk
          path: /home/runner/sdk.tgz

  Job_B:
    needs: [Job_A]
    runs-on: ubuntu-18.04
    steps:
      - name: Download SDK
        uses: actions/download-artifact@v2
        with:
          name: sdk
      - name: Checkout Repository
        run: |
          mkdir -p openwrt

      - name: Prepare SDK
        run: |
          tar -xf sdk.tgz
          mv sdk/build_dir openwrt
          mv sdk/staging_dir openwrt
      
      - name: Final Log
        run: |
          tree openwrt

  Job_C:
    runs-on: ubuntu-18.04
    steps:
      - name: Build Toolchain
        run: |
          cd "/home/runner";
          mkdir -p sdk-c
          touch sdk-c/staging_dir
          touch sdk-c/build_dir
          tar -czvf sdk-c.tgz sdk-c
      - name: Upload SDK
        uses: actions/upload-artifact@v2
        with:
          name: sdk-c
          path: /home/runner/sdk-c.tgz

  Job_D:
    needs: [Job_C]
    runs-on: ubuntu-18.04
    steps:
      - name: Download SDK
        uses: actions/download-artifact@v2
        with:
          name: sdk-c
      - name: Checkout Repository
        run: |
          mkdir -p openwrt

      - name: Prepare SDK
        run: |
          tar -xf sdk-c.tgz
          mv sdk-c/build_dir openwrt
          mv sdk-c/staging_dir openwrt
      
      - name: Final Log
        run: |
          tree openwrt


  Job_F:
    needs: [Job_B, Job_D]
    runs-on: ubuntu-18.04
    steps:
      - name: Download SDK
        uses: actions/download-artifact@v2
        with:
          name: sdk
      - name: Download SDK-C
        uses: actions/download-artifact@v2
        with:
          name: sdk-c
      - name: Log
        run: |
          tar -xf sdk.tgz
          tar -xf sdk-c.tgz
          tree .
      - name: Final SDK
        run: |
          rm sdk.tgz
          rm sdk-c.tgz
          mv sdk-c sdk
          tar -czf sdk-latest.tgz sdk
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: sdk-latest
          path: ./sdk-latest.tgz

      - name: Delete Release
        uses: dev-drprasad/delete-tag-and-release@v0.1.3
        with:
          delete_release: true # default: false
          tag_name: latest-sdk # tag name to delete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: latest-sdk
          release_name: latest-sdk
          body: |
            ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./sdk-latest.tgz
          asset_name: sdk-latest.tgz
          asset_content_type: application/gzip

